{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Documents/propel-tech/frontend/src/pages/Home.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport ContactTable from '../components/ContactsTable';\nimport SearchForm from '../components/SearchForm';\nimport EditContact from '../components/EditContact';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Home = ({\n  addressBook\n}) => {\n  _s();\n  const [contacts, set_contacts] = useState([]); //stores the list of contacts' json\n  const [query, set_query] = useState(\"\"); //stores the current search query\n  const [query_json, set_json] = useState({\n    query: \"\"\n  }); //stores the query json that is sent to the address book object\n  const [edit_contact, set_edit_contact] = useState(null); //stores the details of the contact that needs to be edited\n  const [edit_done, set_edit_done] = useState(null); //indicator to confirm that edit mode is closed\n\n  // gathers the appropriate set of contact list whenever the component is rendered\n  useEffect(() => {\n    if (query_json.query === \"\") {\n      set_contacts(addressBook.view_all());\n    } else {\n      set_contacts(addressBook.search_contacts(query_json));\n    }\n  }, [addressBook, query_json, edit_done]);\n\n  // updates the contact in the address book whenever editing is completed\n  useEffect(() => {\n    if (edit_done === \"True\") {\n      addressBook.update_contact(edit_contact);\n      set_edit_contact(null);\n      set_edit_done(null);\n    } else if (edit_done === \"False\") {\n      set_edit_contact(null);\n      set_edit_done(null);\n    }\n  }, [addressBook, edit_contact, edit_done]);\n\n  // updates the query json whenever a new search is made\n  const handle_query = e => {\n    e.preventDefault();\n    set_json({\n      query: query\n    });\n  };\n\n  // finds the contact to be edited based on the index and updates the edit contact variable\n  const handle_edit_contact = index => {\n    const contact_to_edit = contacts.find(contact => contact.index === index);\n    set_edit_contact(contact_to_edit);\n  };\n\n  // deletes the selected contact and updates the table\n  const handle_delete_contact = index => {\n    addressBook.delete_contact(index);\n    if (query === \"\") {\n      set_contacts(addressBook.view_all());\n    } else {\n      set_contacts(addressBook.search_contacts(query_json));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container pt-3\",\n    children: edit_contact !== null ? /*#__PURE__*/_jsxDEV(EditContact, {\n      edit_contact: edit_contact,\n      set_edit_contact: set_edit_contact,\n      set_edit_done: set_edit_done\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(SearchForm, {\n        query: query,\n        handle_query: handle_query,\n        set_query: set_query\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 21\n      }, this), contacts.length > 0 ? /*#__PURE__*/_jsxDEV(ContactTable, {\n        contacts: contacts,\n        handle_edit: handle_edit_contact,\n        handle_delete: handle_delete_contact\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"pt-5\",\n        children: \"No contacts found.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n};\n_s(Home, \"dVjGAKQTf67XgaXEecq+Ppp7NN8=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","ContactTable","SearchForm","EditContact","jsxDEV","_jsxDEV","Fragment","_Fragment","Home","addressBook","_s","contacts","set_contacts","query","set_query","query_json","set_json","edit_contact","set_edit_contact","edit_done","set_edit_done","view_all","search_contacts","update_contact","handle_query","e","preventDefault","handle_edit_contact","index","contact_to_edit","find","contact","handle_delete_contact","delete_contact","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","handle_edit","handle_delete","_c","$RefreshReg$"],"sources":["/Users/mac/Documents/propel-tech/frontend/src/pages/Home.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ContactTable from '../components/ContactsTable';\nimport SearchForm from '../components/SearchForm';\nimport EditContact from '../components/EditContact'\n\nconst Home = ({ addressBook }) =>  {\n\n    const [contacts, set_contacts] = useState([]); //stores the list of contacts' json\n    const [query, set_query] = useState(\"\"); //stores the current search query\n    const [query_json, set_json] = useState({query : \"\"}); //stores the query json that is sent to the address book object\n    const [edit_contact, set_edit_contact] = useState(null); //stores the details of the contact that needs to be edited\n    const [edit_done, set_edit_done] = useState(null); //indicator to confirm that edit mode is closed\n\n    // gathers the appropriate set of contact list whenever the component is rendered\n    useEffect(() => {\n        if (query_json.query === \"\") {\n            set_contacts(addressBook.view_all());\n        } else {\n            set_contacts(addressBook.search_contacts(query_json));\n        }\n        \n    }, [addressBook, query_json, edit_done]);\n\n    // updates the contact in the address book whenever editing is completed\n    useEffect(() => {\n        if (edit_done === \"True\"){\n            addressBook.update_contact(edit_contact);\n            set_edit_contact(null);\n            set_edit_done(null)\n        } else if (edit_done === \"False\"){\n            set_edit_contact(null);\n            set_edit_done(null)\n        }\n    }, [addressBook, edit_contact, edit_done]);\n\n    // updates the query json whenever a new search is made\n    const handle_query = (e) => {\n        e.preventDefault();\n        set_json({query: query});\n    }\n\n    // finds the contact to be edited based on the index and updates the edit contact variable\n    const handle_edit_contact = (index) => {\n        const contact_to_edit = contacts.find((contact) => contact.index === index);\n        set_edit_contact(contact_to_edit);\n    };\n\n    // deletes the selected contact and updates the table\n    const handle_delete_contact = (index) => {\n        addressBook.delete_contact(index);\n        if (query === \"\") {\n            set_contacts(addressBook.view_all());\n        } else {\n            set_contacts(addressBook.search_contacts(query_json));\n        }\n    };\n\n    return (\n        <div className=\"container pt-3\">\n            {/* checks if a contact needs to be edited */}\n            {edit_contact !== null? (\n                <EditContact \n                    edit_contact ={edit_contact}\n                    set_edit_contact = {set_edit_contact}\n                    set_edit_done = {set_edit_done}\n                />\n            ) : (\n                <>\n                    {/* displays the search bar */}\n                    <SearchForm\n                        query={query}\n                        handle_query={handle_query}\n                        set_query={set_query}\n                    />\n\n                    {/* if number of contact being searched is greater than 0, displays them in  a table */}\n                    {contacts.length > 0 ? (\n                        <ContactTable\n                            contacts={contacts}\n                            handle_edit={handle_edit_contact}\n                            handle_delete={handle_delete_contact}\n                        />\n                        \n                    ) : (\n                        <h3 className='pt-5'>No contacts found.</h3>\n                    )}\n                </>\n            )}\n        </div>\n    );\n};\n\nexport default Home;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}