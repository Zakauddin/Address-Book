{"ast":null,"code":"import _classPrivateFieldLooseBase from \"/Users/mac/Documents/propel-tech/frontend/node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseBase.js\";\nimport _classPrivateFieldLooseKey from \"/Users/mac/Documents/propel-tech/frontend/node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseKey.js\";\nimport Contact from \"./Contact\";\nconst data = require('./data.json');\nvar _contacts = /*#__PURE__*/_classPrivateFieldLooseKey(\"contacts\");\nclass AddressBook {\n  constructor() {\n    // private variable to store a lit of contact objects\n    Object.defineProperty(this, _contacts, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldLooseBase(this, _contacts)[_contacts] = data.map(({\n      first_name,\n      last_name,\n      phone,\n      email\n    }) => new Contact(first_name, last_name, phone, email));\n  }\n\n  // gets all the data of a contact and the index of the contact in the arrat to create a json \n  convert_contact_to_JSON(contact, index) {\n    return {\n      index: index,\n      first_name: contact.get_first_name(),\n      last_name: contact.get_last_name(),\n      phone: contact.get_phone(),\n      email: contact.get_email()\n    };\n  }\n\n  // retruns a json of including all the details of all the contacts\n  view_all() {\n    const data = _classPrivateFieldLooseBase(this, _contacts)[_contacts].map((contact, index) => this.convert_contact_to_JSON(contact, index));\n    return data;\n  }\n\n  // deletes the contact of the index provided\n  delete_contact(index) {\n    _classPrivateFieldLooseBase(this, _contacts)[_contacts].splice(index, 1);\n  }\n\n  // adds a new contact object to the list\n  add_contact(data) {\n    _classPrivateFieldLooseBase(this, _contacts)[_contacts].push(new Contact(data.first_name, data.last_name, data.phone, data.email));\n  }\n\n  // search for all relevant contacts matching the query in the data parameter\n  search_contacts(data) {\n    const l_query = data.query.toLowerCase();\n    const result = [];\n    // reduce function outputs a single \n    return _classPrivateFieldLooseBase(this, _contacts)[_contacts].reduce((result, contact, index) => {\n      const l_first_name = contact.get_first_name().toLowerCase();\n      const l_last_name = contact.get_last_name().toLowerCase();\n      const phone = contact.get_phone();\n      const l_email = contact.get_first_name().toLowerCase();\n      if (l_first_name.includes(l_query) || l_last_name.includes(l_query) || phone.includes(l_query) || l_email.includes(l_query)) {\n        const contact_JSON = this.convert_contact_to_JSON(contact, index);\n        result.push(contact_JSON);\n      }\n      return result;\n    }, []);\n  }\n  update_contact(data) {\n    const index = data.index;\n    _classPrivateFieldLooseBase(this, _contacts)[_contacts][index].set_first_name(data.first_name);\n    _classPrivateFieldLooseBase(this, _contacts)[_contacts][index].set_last_name(data.last_name);\n    _classPrivateFieldLooseBase(this, _contacts)[_contacts][index].set_phone(data.phone);\n    _classPrivateFieldLooseBase(this, _contacts)[_contacts][index].set_email(data.email);\n  }\n}\nexport default AddressBook;","map":{"version":3,"names":["Contact","data","require","_contacts","_classPrivateFieldLooseKey","AddressBook","constructor","Object","defineProperty","writable","value","_classPrivateFieldLooseBase","map","first_name","last_name","phone","email","convert_contact_to_JSON","contact","index","get_first_name","get_last_name","get_phone","get_email","view_all","delete_contact","splice","add_contact","push","search_contacts","l_query","query","toLowerCase","result","reduce","l_first_name","l_last_name","l_email","includes","contact_JSON","update_contact","set_first_name","set_last_name","set_phone","set_email"],"sources":["/Users/mac/Documents/propel-tech/frontend/src/components/AddressBook.js"],"sourcesContent":["import Contact from \"./Contact\";\nconst data = require('./data.json');\n\nclass AddressBook {\n\n    // private variable to store a lit of contact objects\n    #contacts;\n\n    constructor(){\n        this.#contacts = data.map(\n            ({ first_name, last_name, phone, email }) =>\n              new Contact(first_name, last_name, phone, email)\n          );\n    }\n\n    // gets all the data of a contact and the index of the contact in the arrat to create a json \n    convert_contact_to_JSON(contact, index) {\n        return {\n            index: index,\n            first_name: contact.get_first_name(),\n            last_name: contact.get_last_name(),\n            phone: contact.get_phone(),\n            email: contact.get_email()\n        };\n    }\n\n    // retruns a json of including all the details of all the contacts\n    view_all() {\n        const data =  this.#contacts.map((contact, index) => this.convert_contact_to_JSON(contact, index));\n        return data;\n    }\n\n    // deletes the contact of the index provided\n    delete_contact(index) {\n        this.#contacts.splice(index, 1);\n    }\n\n    // adds a new contact object to the list\n    add_contact(data) {\n        this.#contacts.push(new Contact(data.first_name, data.last_name, data.phone, data.email))\n    }\n\n    // search for all relevant contacts matching the query in the data parameter\n    search_contacts(data) {\n        const l_query = data.query.toLowerCase();\n\n        const result = [];\n        // reduce function outputs a single \n        return this.#contacts.reduce((result, contact, index) => {\n            const l_first_name = contact.get_first_name().toLowerCase();\n            const l_last_name = contact.get_last_name().toLowerCase();\n            const phone = contact.get_phone();\n            const l_email = contact.get_first_name().toLowerCase();\n\n            if(\n                l_first_name.includes(l_query) || l_last_name.includes(l_query) || phone.includes(l_query) || l_email.includes(l_query)\n            ) {\n                const contact_JSON = this.convert_contact_to_JSON(contact, index);\n                result.push(contact_JSON);\n            }\n\n            return result;\n        }, []);\n    }\n\n    update_contact(data) {\n        const index = data.index;\n        this.#contacts[index].set_first_name(data.first_name);\n        this.#contacts[index].set_last_name(data.last_name);\n        this.#contacts[index].set_phone(data.phone);\n        this.#contacts[index].set_email(data.email);\n    }\n}\n\nexport default AddressBook;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}